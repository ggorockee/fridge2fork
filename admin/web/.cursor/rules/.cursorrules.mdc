---
alwaysApply: true
---

# Fridge2Fork Admin Web - Cursor Rules

## 프로젝트 개요
- **프로젝트명**: Fridge2Fork Admin Web
- **기술 스택**: Next.js 15, TypeScript, Tailwind CSS, Linear 테마 시스템
- **목적**: 냉장고에서 포크까지 - 오늘의냉장고 관리자용 웹 애플리케이션

## 필수 컴포넌트 시스템 사용 규칙

### 1. 테마 시스템 (MANDATORY)
- **파일**: `lib/theme.ts`, `lib/utils.ts`
- **사용법**: 모든 컴포넌트에서 Linear 테마 시스템을 사용해야 함
- **CSS 변수**: `globals.css`에 정의된 CSS 변수 사용
- **유틸리티**: `cn()` 함수로 클래스명 병합

```typescript
import { cn } from "@/lib/utils";
import { theme } from "@/lib/theme";

// 올바른 사용법
<div className={cn("bg-gray-800 text-gray-100", className)}>
```

### 2. UI 컴포넌트 (MANDATORY)

#### Button 컴포넌트
- **파일**: `components/ui/Button.tsx`
- **사용법**: 모든 버튼은 이 컴포넌트를 사용해야 함
- **Variants**: `primary`, `secondary`, `ghost`
- **Sizes**: `sm`, `md`, `lg`

```typescript
import { Button } from "@/components/ui/Button";

// 올바른 사용법
<Button variant="primary" size="md" onClick={handleClick}>
  버튼 텍스트
</Button>
```

#### Card 컴포넌트
- **파일**: `components/ui/Card.tsx`
- **사용법**: 모든 카드 레이아웃은 이 컴포넌트를 사용해야 함
- **Variants**: `default`, `elevated`, `outlined`, `glass`
- **Features**: 이미지, 헤더, 푸터, 액션 버튼 지원

```typescript
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/Card";

// 올바른 사용법
<Card variant="default" hoverable>
  <CardHeader>
    <CardTitle>카드 제목</CardTitle>
  </CardHeader>
  <CardContent>
    카드 내용
  </CardContent>
  <CardFooter>
    액션 버튼들
  </CardFooter>
</Card>
```

#### Carousel 컴포넌트
- **파일**: `components/ui/Carousel.tsx`
- **사용법**: 슬라이드쇼나 이미지 갤러리는 이 컴포넌트를 사용해야 함
- **Features**: 자동 재생, 무한 루프, 점 네비게이션, 화살표 네비게이션

```typescript
import { Carousel } from "@/components/ui/Carousel";

// 올바른 사용법
<Carousel
  items={carouselItems}
  autoPlay={true}
  showDots={true}
  showArrows={true}
  itemsToShow={3}
/>
```

### 3. 레이아웃 컴포넌트 (MANDATORY)

#### Navbar 컴포넌트
- **파일**: `components/layout/Navbar.tsx`
- **사용법**: 모든 페이지의 상단 네비게이션은 이 컴포넌트를 사용해야 함
- **Features**: 반응형, 드롭다운 메뉴, 글래스모피즘 효과

```typescript
import { Navbar } from "@/components/layout/Navbar";

// 올바른 사용법
<Navbar
  brand="Fridge2Fork"
  menuItems={menuItems}
  actions={actionButtons}
  glass={true}
  fixed={true}
/>
```

## 스타일링 규칙

### 1. 색상 시스템
- **Primary Background**: `#080a0a` (--bg-primary)
- **Secondary Background**: `#0c0d0e` (--bg-secondary)
- **Card Background**: `#232328` (--bg-card)
- **Primary Text**: `#f7f8f8` (--text-primary)
- **Secondary Text**: `#8a8f98` (--text-secondary)
- **Accent Color**: `#FFA451` (--accent-primary)

### 2. 타이포그래피
- **Primary Font**: Inter Variable, SF Pro Display, system fonts
- **Mono Font**: SF Mono, Monaco, system mono fonts
- **Font Weights**: 300, 400, 500, 510, 700

### 3. 간격 시스템
- **Spacing Scale**: 4px, 8px, 12px, 16px, 20px, 24px, 32px, 40px, 48px, 64px, 80px, 96px, 128px
- **Border Radius**: 4px, 8px, 12px, 16px, 24px, 9999px

### 4. 애니메이션
- **Transition**: 0.1s, 0.2s, 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)
- **Hover Effects**: translateY(-2px), scale(1.02), glow effect

## 코딩 규칙

### 1. 컴포넌트 생성 시
- 모든 컴포넌트는 TypeScript로 작성
- `React.forwardRef` 사용하여 ref 전달 지원
- `displayName` 설정 필수
- Props 인터페이스 정의 필수
- JSDoc 주석으로 문서화

### 2. 스타일링 시
- Tailwind CSS 클래스 사용
- CSS 변수 활용
- `cn()` 함수로 클래스명 병합
- 반응형 디자인 고려

### 3. 파일 구조
```
components/
├── ui/           # 재사용 가능한 UI 컴포넌트
├── layout/       # 레이아웃 컴포넌트
└── forms/        # 폼 관련 컴포넌트

lib/
├── theme.ts      # 테마 시스템
└── utils.ts      # 유틸리티 함수들
```

## 금지 사항

### 1. 절대 사용하지 말 것
- 인라인 스타일 (style 속성)
- CSS-in-JS 라이브러리 (styled-components, emotion 등)
- 다른 UI 라이브러리 (Material-UI, Ant Design 등)
- 커스텀 CSS 파일 (globals.css 제외)

### 2. 피해야 할 패턴
- 하드코딩된 색상값
- 하드코딩된 간격값
- 중복된 컴포넌트 로직
- 접근성을 고려하지 않은 컴포넌트

## 접근성 규칙

### 1. 필수 요소
- 모든 인터랙티브 요소에 `aria-label` 또는 `aria-labelledby` 제공
- 키보드 네비게이션 지원
- 색상 대비 비율 준수 (WCAG 2.1 AA)
- 포커스 표시기 제공

### 2. 시맨틱 HTML
- 적절한 HTML 태그 사용 (`button`, `nav`, `main`, `section` 등)
- 헤딩 구조 준수 (h1 → h2 → h3)
- 목록 요소 사용 (`ul`, `ol`, `li`)

## 성능 규칙

### 1. 최적화
- `React.memo`로 불필요한 리렌더링 방지
- `useCallback`, `useMemo` 적절히 사용
- 이미지 최적화 (Next.js Image 컴포넌트 사용)
- 코드 스플리팅 적용

### 2. 번들 크기
- 불필요한 라이브러리 import 방지
- Tree shaking 가능한 import 방식 사용
- 동적 import 활용

## 테스트 규칙

### 1. 컴포넌트 테스트
- 모든 컴포넌트에 대한 단위 테스트 작성
- 사용자 상호작용 테스트
- 접근성 테스트

### 2. E2E 테스트
- 주요 사용자 플로우 테스트
- 반응형 디자인 테스트
- 크로스 브라우저 테스트

## 배포 규칙

### 1. 빌드 최적화
- Production 빌드에서 불필요한 코드 제거
- 이미지 최적화
- CSS 최적화

### 2. 환경 설정
- 환경별 설정 분리
- 환경 변수 사용
- 보안 설정 적용

## 예외 상황

### 1. 컴포넌트가 없는 경우
- 새로운 컴포넌트가 필요한 경우, 먼저 기존 컴포넌트로 대체 가능한지 확인
- 대체 불가능한 경우, 새로운 컴포넌트를 생성하되 위 규칙을 따라야 함

### 2. 외부 라이브러리 사용
- 외부 라이브러리 사용 시, 반드시 Linear 테마에 맞게 스타일링
- 가능한 경우 커스텀 컴포넌트로 래핑

## 업데이트 규칙

### 1. 컴포넌트 수정 시
- 기존 사용처에 영향이 없는지 확인
- 하위 호환성 유지
- 문서 업데이트

### 2. 테마 변경 시
- 모든 컴포넌트에 일관되게 적용
- 시각적 회귀 테스트 수행
- 사용자 피드백 수집

---

**중요**: 이 규칙들을 위반하는 코드는 리뷰에서 거부될 수 있습니다. 모든 개발자는 이 규칙을 숙지하고 따라야 합니다.
# Fridge2Fork Admin Web - Cursor Rules

## 프로젝트 개요
- **프로젝트명**: Fridge2Fork Admin Web
- **기술 스택**: Next.js 15, TypeScript, Tailwind CSS, Linear 테마 시스템
- **목적**: 냉장고에서 포크까지 - 오늘의냉장고 관리자용 웹 애플리케이션

## 필수 컴포넌트 시스템 사용 규칙

### 1. 테마 시스템 (MANDATORY)
- **파일**: `lib/theme.ts`, `lib/utils.ts`
- **사용법**: 모든 컴포넌트에서 Linear 테마 시스템을 사용해야 함
- **CSS 변수**: `globals.css`에 정의된 CSS 변수 사용
- **유틸리티**: `cn()` 함수로 클래스명 병합

```typescript
import { cn } from "@/lib/utils";
import { theme } from "@/lib/theme";

// 올바른 사용법
<div className={cn("bg-gray-800 text-gray-100", className)}>
```

### 2. UI 컴포넌트 (MANDATORY)

#### Button 컴포넌트
- **파일**: `components/ui/Button.tsx`
- **사용법**: 모든 버튼은 이 컴포넌트를 사용해야 함
- **Variants**: `primary`, `secondary`, `ghost`
- **Sizes**: `sm`, `md`, `lg`

```typescript
import { Button } from "@/components/ui/Button";

// 올바른 사용법
<Button variant="primary" size="md" onClick={handleClick}>
  버튼 텍스트
</Button>
```

#### Card 컴포넌트
- **파일**: `components/ui/Card.tsx`
- **사용법**: 모든 카드 레이아웃은 이 컴포넌트를 사용해야 함
- **Variants**: `default`, `elevated`, `outlined`, `glass`
- **Features**: 이미지, 헤더, 푸터, 액션 버튼 지원

```typescript
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/Card";

// 올바른 사용법
<Card variant="default" hoverable>
  <CardHeader>
    <CardTitle>카드 제목</CardTitle>
  </CardHeader>
  <CardContent>
    카드 내용
  </CardContent>
  <CardFooter>
    액션 버튼들
  </CardFooter>
</Card>
```

#### Carousel 컴포넌트
- **파일**: `components/ui/Carousel.tsx`
- **사용법**: 슬라이드쇼나 이미지 갤러리는 이 컴포넌트를 사용해야 함
- **Features**: 자동 재생, 무한 루프, 점 네비게이션, 화살표 네비게이션

```typescript
import { Carousel } from "@/components/ui/Carousel";

// 올바른 사용법
<Carousel
  items={carouselItems}
  autoPlay={true}
  showDots={true}
  showArrows={true}
  itemsToShow={3}
/>
```

### 3. 레이아웃 컴포넌트 (MANDATORY)

#### Navbar 컴포넌트
- **파일**: `components/layout/Navbar.tsx`
- **사용법**: 모든 페이지의 상단 네비게이션은 이 컴포넌트를 사용해야 함
- **Features**: 반응형, 드롭다운 메뉴, 글래스모피즘 효과

```typescript
import { Navbar } from "@/components/layout/Navbar";

// 올바른 사용법
<Navbar
  brand="Fridge2Fork"
  menuItems={menuItems}
  actions={actionButtons}
  glass={true}
  fixed={true}
/>
```

## 스타일링 규칙

### 1. 색상 시스템
- **Primary Background**: `#080a0a` (--bg-primary)
- **Secondary Background**: `#0c0d0e` (--bg-secondary)
- **Card Background**: `#232328` (--bg-card)
- **Primary Text**: `#f7f8f8` (--text-primary)
- **Secondary Text**: `#8a8f98` (--text-secondary)
- **Accent Color**: `#FFA451` (--accent-primary)

### 2. 타이포그래피
- **Primary Font**: Inter Variable, SF Pro Display, system fonts
- **Mono Font**: SF Mono, Monaco, system mono fonts
- **Font Weights**: 300, 400, 500, 510, 700

### 3. 간격 시스템
- **Spacing Scale**: 4px, 8px, 12px, 16px, 20px, 24px, 32px, 40px, 48px, 64px, 80px, 96px, 128px
- **Border Radius**: 4px, 8px, 12px, 16px, 24px, 9999px

### 4. 애니메이션
- **Transition**: 0.1s, 0.2s, 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)
- **Hover Effects**: translateY(-2px), scale(1.02), glow effect

## 코딩 규칙

### 1. 컴포넌트 생성 시
- 모든 컴포넌트는 TypeScript로 작성
- `React.forwardRef` 사용하여 ref 전달 지원
- `displayName` 설정 필수
- Props 인터페이스 정의 필수
- JSDoc 주석으로 문서화

### 2. 스타일링 시
- Tailwind CSS 클래스 사용
- CSS 변수 활용
- `cn()` 함수로 클래스명 병합
- 반응형 디자인 고려

### 3. 파일 구조
```
components/
├── ui/           # 재사용 가능한 UI 컴포넌트
├── layout/       # 레이아웃 컴포넌트
└── forms/        # 폼 관련 컴포넌트

lib/
├── theme.ts      # 테마 시스템
└── utils.ts      # 유틸리티 함수들
```

## 금지 사항

### 1. 절대 사용하지 말 것
- 인라인 스타일 (style 속성)
- CSS-in-JS 라이브러리 (styled-components, emotion 등)
- 다른 UI 라이브러리 (Material-UI, Ant Design 등)
- 커스텀 CSS 파일 (globals.css 제외)

### 2. 피해야 할 패턴
- 하드코딩된 색상값
- 하드코딩된 간격값
- 중복된 컴포넌트 로직
- 접근성을 고려하지 않은 컴포넌트

## 접근성 규칙

### 1. 필수 요소
- 모든 인터랙티브 요소에 `aria-label` 또는 `aria-labelledby` 제공
- 키보드 네비게이션 지원
- 색상 대비 비율 준수 (WCAG 2.1 AA)
- 포커스 표시기 제공

### 2. 시맨틱 HTML
- 적절한 HTML 태그 사용 (`button`, `nav`, `main`, `section` 등)
- 헤딩 구조 준수 (h1 → h2 → h3)
- 목록 요소 사용 (`ul`, `ol`, `li`)

## 성능 규칙

### 1. 최적화
- `React.memo`로 불필요한 리렌더링 방지
- `useCallback`, `useMemo` 적절히 사용
- 이미지 최적화 (Next.js Image 컴포넌트 사용)
- 코드 스플리팅 적용

### 2. 번들 크기
- 불필요한 라이브러리 import 방지
- Tree shaking 가능한 import 방식 사용
- 동적 import 활용

## 테스트 규칙

### 1. 컴포넌트 테스트
- 모든 컴포넌트에 대한 단위 테스트 작성
- 사용자 상호작용 테스트
- 접근성 테스트

### 2. E2E 테스트
- 주요 사용자 플로우 테스트
- 반응형 디자인 테스트
- 크로스 브라우저 테스트

## 배포 규칙

### 1. 빌드 최적화
- Production 빌드에서 불필요한 코드 제거
- 이미지 최적화
- CSS 최적화

### 2. 환경 설정
- 환경별 설정 분리
- 환경 변수 사용
- 보안 설정 적용

## 예외 상황

### 1. 컴포넌트가 없는 경우
- 새로운 컴포넌트가 필요한 경우, 먼저 기존 컴포넌트로 대체 가능한지 확인
- 대체 불가능한 경우, 새로운 컴포넌트를 생성하되 위 규칙을 따라야 함

### 2. 외부 라이브러리 사용
- 외부 라이브러리 사용 시, 반드시 Linear 테마에 맞게 스타일링
- 가능한 경우 커스텀 컴포넌트로 래핑

## 업데이트 규칙

### 1. 컴포넌트 수정 시
- 기존 사용처에 영향이 없는지 확인
- 하위 호환성 유지
- 문서 업데이트

### 2. 테마 변경 시
- 모든 컴포넌트에 일관되게 적용
- 시각적 회귀 테스트 수행
- 사용자 피드백 수집

---

**중요**: 이 규칙들을 위반하는 코드는 리뷰에서 거부될 수 있습니다. 모든 개발자는 이 규칙을 숙지하고 따라야 합니다.
