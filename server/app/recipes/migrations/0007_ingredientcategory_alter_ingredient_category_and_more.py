# Generated by Django 5.2.7 on 2025-10-03 15:43

import django.db.models.deletion
from django.db import migrations, models


def create_categories_and_migrate_data(apps, schema_editor):
    """카테고리 생성 및 기존 데이터 마이그레이션"""
    IngredientCategory = apps.get_model('recipes', 'IngredientCategory')
    NormalizedIngredient = apps.get_model('recipes', 'NormalizedIngredient')
    Ingredient = apps.get_model('recipes', 'Ingredient')

    # 정규화 재료 카테고리 생성
    category_map_normalized = {}
    normalized_categories = [
        {'name': '육류', 'code': 'meat', 'icon': '🥩', 'display_order': 1},
        {'name': '채소류', 'code': 'vegetable', 'icon': '🥕', 'display_order': 2},
        {'name': '해산물', 'code': 'seafood', 'icon': '🦐', 'display_order': 3},
        {'name': '조미료', 'code': 'seasoning', 'icon': '🧂', 'display_order': 4},
        {'name': '곡물', 'code': 'grain', 'icon': '🌾', 'display_order': 5},
        {'name': '유제품', 'code': 'dairy', 'icon': '🥛', 'display_order': 6},
        {'name': '기타', 'code': 'etc', 'icon': '📦', 'display_order': 7},
    ]

    for cat_data in normalized_categories:
        category, _ = IngredientCategory.objects.get_or_create(
            code=cat_data['code'],
            category_type='normalized',
            defaults={
                'name': cat_data['name'],
                'icon': cat_data['icon'],
                'display_order': cat_data['display_order'],
                'is_active': True,
            }
        )
        category_map_normalized[cat_data['code']] = category

    # 재료 카테고리 생성
    category_map_ingredient = {}
    ingredient_categories = [
        {'name': '필수 재료', 'code': 'essential', 'icon': '⭐', 'display_order': 1},
        {'name': '조미료', 'code': 'seasoning', 'icon': '🧂', 'display_order': 2},
        {'name': '선택 재료', 'code': 'optional', 'icon': '➕', 'display_order': 3},
    ]

    for cat_data in ingredient_categories:
        category, _ = IngredientCategory.objects.get_or_create(
            code=cat_data['code'],
            category_type='ingredient',
            defaults={
                'name': cat_data['name'],
                'icon': cat_data['icon'],
                'display_order': cat_data['display_order'],
                'is_active': True,
            }
        )
        category_map_ingredient[cat_data['code']] = category

    # NormalizedIngredient 데이터 마이그레이션
    for norm_ing in NormalizedIngredient.objects.all():
        old_category = norm_ing.category
        if old_category and old_category in category_map_normalized:
            norm_ing.category_new = category_map_normalized[old_category]
            norm_ing.save()

    # Ingredient 데이터 마이그레이션
    for ing in Ingredient.objects.all():
        old_category = ing.category
        if old_category and old_category in category_map_ingredient:
            ing.category_new = category_map_ingredient[old_category]
            ing.save()


class Migration(migrations.Migration):

    dependencies = [
        ('recipes', '0006_fridge_fridge_user_idx_fridge_fridge_session_idx_and_more'),
    ]

    operations = [
        # 1. IngredientCategory 모델 생성
        migrations.CreateModel(
            name='IngredientCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='레코드가 생성된 시각', verbose_name='생성일시')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='레코드가 마지막으로 수정된 시각', verbose_name='수정일시')),
                ('name', models.CharField(help_text='예: 육류, 채소류, 필수 재료 등', max_length=50, verbose_name='카테고리명')),
                ('code', models.CharField(help_text='시스템 내부 코드 (예: meat, vegetable)', max_length=50, verbose_name='코드')),
                ('category_type', models.CharField(choices=[('normalized', '정규화 재료 카테고리'), ('ingredient', '재료 카테고리')], default='normalized', help_text='정규화 재료용 또는 재료용', max_length=20, verbose_name='카테고리 타입')),
                ('icon', models.CharField(blank=True, help_text='이모지 또는 아이콘 클래스 (예: 🥩, fas fa-meat)', max_length=50, verbose_name='아이콘')),
                ('display_order', models.IntegerField(default=0, help_text='낮을수록 먼저 표시', verbose_name='표시 순서')),
                ('is_active', models.BooleanField(default=True, help_text='비활성화 시 선택 불가', verbose_name='활성화')),
                ('description', models.TextField(blank=True, help_text='카테고리 설명', verbose_name='설명')),
            ],
            options={
                'verbose_name': '재료 카테고리',
                'verbose_name_plural': '재료 카테고리',
                'ordering': ['category_type', 'display_order', 'name'],
                'indexes': [models.Index(fields=['category_type', 'is_active'], name='category_type_active_idx'), models.Index(fields=['code'], name='category_code_idx')],
                'unique_together': {('code', 'category_type')},
            },
        ),

        # 2. 임시 ForeignKey 필드 추가
        migrations.AddField(
            model_name='normalizedingredient',
            name='category_new',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='recipes.ingredientcategory'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='category_new',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='recipes.ingredientcategory'),
        ),

        # 3. 데이터 마이그레이션
        migrations.RunPython(create_categories_and_migrate_data),

        # 4. 기존 category 필드 삭제
        migrations.RemoveField(
            model_name='normalizedingredient',
            name='category',
        ),
        migrations.RemoveField(
            model_name='ingredient',
            name='category',
        ),

        # 5. category_new를 category로 이름 변경
        migrations.RenameField(
            model_name='normalizedingredient',
            old_name='category_new',
            new_name='category',
        ),
        migrations.RenameField(
            model_name='ingredient',
            old_name='category_new',
            new_name='category',
        ),

        # 6. category 필드 속성 업데이트
        migrations.AlterField(
            model_name='ingredient',
            name='category',
            field=models.ForeignKey(blank=True, help_text='재료 카테고리 (필수/조미료/선택)', limit_choices_to={'category_type': 'ingredient', 'is_active': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ingredients', to='recipes.ingredientcategory', verbose_name='카테고리'),
        ),
        migrations.AlterField(
            model_name='normalizedingredient',
            name='category',
            field=models.ForeignKey(blank=True, help_text='재료 분류', limit_choices_to={'category_type': 'normalized', 'is_active': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='normalized_ingredients', to='recipes.ingredientcategory', verbose_name='카테고리'),
        ),
    ]
